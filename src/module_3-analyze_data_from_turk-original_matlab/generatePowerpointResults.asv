function slides = generatePowerpointResults( imgsDir, pptFFN, widthHeightCellStr, slideInd )
%GENERATEPOWERPOINTRESULTS Quick method for writing turker images to ppt.
%   slides = GENERATEPOWERPOINTRESULTS( imgsDir, pptFFN, widthHeightCellStr )
%   returns the powerpoint slides object given the inputted directory of
%   images generated by VISUALIZERESULTS. Each image is written to its own
%   blank slide on a powerpoint presentation document with a full file name
%   specified by pptFFN. The default width and height dimensions of the
%   images on every slide is specified by widthHeighCellStr.
%   
%   Note: widthHeightCellStr default is { '11.95 in', '7.25 in' }.
%   
%   See also: VISUALIZERESULTS.
%==========================================================================

narginchk( 3, 4 );
nargoutchk( 0, 1 );

% Get images in inputted directory.
d = dir( imgsDir );
ffns = fullfile( imgsDir, transpose( { d.name } ) );
ffns( 1:2 ) = []; % remove unix artifacts.
ffns( ~contains( ffns, {'.jpg','.png','.tiff','.tif'} ) ) = [];
numImages = numel( ffns );

% Write each image to a powerpoint slide.
import mlreportgen.ppt.*
slides = Presentation( pptFFN );
if nargin == 4 % TO-do: There must be a more efficient way to do this...
    newPicObjects = cell( numImages, 1 );
    for idx = 1:numImages
        newPicObjects{ idx } = Picture( which( ffns{ idx } ) );
        newPicObjects{ idx }.Width = widthHeightCellStr{ 1 };
        newPicObjects{ idx }.Height = widthHeightCellStr{ 2 };
    end

    % Index slicing
    I = slideInd;
    L = 1:numel( slides.Children );
    out = cell( 1, length(I) + 1 );
    for i = 1:length(I)
        if i == 1
            out{i} = slides.Children( L(1:I(i)) );
        else
            out{i} = slides.Children( L((I(i-1)+1):I(i)) );
        end
    end
    out{end} = slides.Children( L((I(end)+1):end) );
    
    % Extend existing pres with copies of slides.
    tmpSlideCopies = slides.Children( 1:numImages );
    tmp = repmat( out, 2, 1 );
    for idx = 1:numel( slideInd )
        tmp{ 2, idx } = tmpSlideCopies( idx );
        replace( tmp{ 2, idx }, 'Picture', newPicObjects{ idx } )
    end
    tmp( end ) = [];

    % Reassemble and rewrite as new.
    tmp2 = cellfun( @transpose, tmp, 'UniformOutput', 0 );
    newSlidesOrder = vertcat( tmp2{ : } );
    close( slides )
    slides2 = Presentation( pptFFN );
    for idx = 1:numel( newSlidesOrder )
        slidetmp = add( slides2, 'Blank' );
        add( slidetmp, newSlidesOrder( 1 ).Children( end ) );
    end
    close( slides2 );
else
    for idx = 1:numImages
        picSlideIdx = add( slides, 'Blank' );
        plane = Picture( ffns{ idx } );
        plane.Width = widthHeightCellStr{ 1 };
        plane.Height = widthHeightCellStr{ 2 };
        add( picSlideIdx, plane );
    end
    close( slides );
end

